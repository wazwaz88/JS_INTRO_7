


07-29-2023 JS Data Types & Operators

RECAP:
Output statement: console.log()

let age = 45;

console.log("Age is " + age); // "Age is 45"

Concatenation => putting together strings or strings with variables
+ is used for Concatenation and addition (Math operator)

number + number     -> Math - addition
string + number     -> Concatenation
number + string     -> Concatenation
string + string     -> Concatenation


VARIABLES 
var: was used before ES6 (2015)
let: mutable-can be changed-not final
const: immutable-cannot be changed-final


pi, gravity, 

let age; // declare

age = 25; // assign




const red = "red"; // declared and initialized

const pi; // ERROR

pi = 3.14;



const name, age; // false
let n1 = 45, n2; //  true
const num1 = 45, num2; // false
let x, let y; // false
let a; let b; // true but not preferred
let i1; i2; // false



declaration         let name;
assignment          name = "";
re-assignment       name = "John";
initialization      let age = 45;


IT: Information Technology
information: data


DATA TYPES: There are 2 types
PRIMITIVES: not advanced-complex. 7 primitives
string: email, name, lname, address, ssn...
    we store strigns in double quotes, single quotes

numbers: age, prices, quantity...
    whole numbers: 10, 5
    floating numbers: 10.5, 1.234234
    it is good to use up to 15-16 precision


BigInt: used for larger numbers
    123456789012345823746528376582

boolean: true or false


REFERENCE TYPES: complex-advanced data types-objects


credentials: username and password


if(username.isCorrect()) {
    if(password.isCorrect()){
        // login
    }
    else{
        // WRONG PASSWORD
    }
}
else{
    // WRONG USERNAME
}



let number = 15;

Other languages: byte, short, int, long, float, double -> compiled languages
15.0 / 2   -> 7.5
15 / 2     -> 7


15.0 / 2    -> 7.5
15 / 2      -> 7.5



"123"   -> string
123     -> number



The difference between =, ==, ===?
= assignment operator
== comparison
=== strict comparison


undefined vs null
undefined: it is a variable declared but not assigned with any value
let age;

null: it is variable assigned with null (explicitly). It states you have no information about the value.
let age = null;


BigInteger



JS OPERATORS 
=   assignment operator

shorthand assignment operator
+=
-=
*=
**=
/=
%=


Arithmetic operators
+   sum or addition
*   multiplication-product
-   substraction
/   division
%   modulus / remainder
**  exponentiation
++  increment
--  decrement

Comparison operators
==  equals
=== strict equals
!=  not equals
!== strict not equals
>   greater than
<   less than
>=  greater or equals
<=  less than or equals

Logical operators
&&  and 
||  or
!   not   



15 % 4 = 3          => 15 = 3*4 + 3
27 % 8 = 3          => 27 = 3*8 + 3
21 % 21 = 0         => 21 = 1*21 + 0
75 % 25 = 0         => 75 = 3*25 + 0

3 % 5 =  3           => 3 = 0*5 + 3

2376452735 % 2376452736 = 2376452735


1. if the number on the left is less than the number on the right   => the result is the left number itself
2. if the left number is greater than the right number              => you find the remainder
3. if the left number is divisible by the right number              => the result is ZERO



x % 2 == 0      => EVEN 2, 4, 0, -6, 10, 14
x % 2 == 1      => ODD 1, 3, 5, -9



PRIORITY
1. parantheses
2. exponentiation
3. multiplication, division
4. addition, subtraction